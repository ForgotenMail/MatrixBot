
import asyncio
import aiosqlite
from datetime import datetime, timedelta
from nio import AsyncClient, RoomMessageText

DB_FILE = "sessionstate.db"

class SessionState:
    IDLE = "IDLE"
    RUNNING = "RUNNING"
    PAUSED = "PAUSED"
    STOPPED = "STOPPED"
    MANUAL_ENTRY = "MANUAL_ENTRY"

class Bot:
    def __init__(self, homeserver, user_id, access_token):
        self.client = AsyncClient(homeserver, user_id)
        self.client.access_token = access_token
        self.client.add_event_callback(self.message_callback, RoomMessageText)
        self.state = SessionState.IDLE
        self.start_time = None
        self.manual_entry_time = None
        self.paused = False

    async def log_command(self, user_id, command, state):
        async with aiosqlite.connect(DB_FILE) as db:
            await db.execute('''
                CREATE TABLE IF NOT EXISTS session_state (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id TEXT NOT NULL,
                    command TEXT NOT NULL,
                    state TEXT NOT NULL,
                    timestamp TEXT NOT NULL
                )
            ''')
            await db.execute('''
                INSERT INTO session_state (user_id, command, state, timestamp)
                VALUES (?, ?, ?, ?)
            ''', (user_id, command.upper(), state.upper(), datetime.utcnow().isoformat()))
            await db.commit()

    async def send(self, room, message):
        await self.client.room_send(
            room_id=room,
            message_type="m.room.message",
            content={"msgtype": "m.text", "body": message}
        )

    async def message_callback(self, room, event):
        if event.sender == self.client.user: return

        msg = event.body.strip().replace(" ", "").lower()
        command = msg.split()[0] if " " in msg else msg

        # Make command detection more robust
        content = event.body.strip().lower().replace("!", "")
        args = content.split()
        command = args[0] if args else ""
        command = command.lower()

        if command in ("start", "!start"):
            if self.state == SessionState.RUNNING:
                await self.send(room.room_id, "Already started.")
                return
            self.state = SessionState.RUNNING
            self.start_time = datetime.now()
            await self.send(room.room_id, "Timer started.")
            await self.log_command(event.sender, "START", self.state)

        elif command in ("pause", "!pause"):
            if self.state != SessionState.RUNNING:
                await self.send(room.room_id, "Cannot pause. Not currently running.")
                return
            self.state = SessionState.PAUSED
            await self.send(room.room_id, "Timer paused.")
            await self.log_command(event.sender, "PAUSE", self.state)

        elif command in ("unpause", "!unpause"):
            if self.state != SessionState.PAUSED:
                await self.send(room.room_id, "Cannot unpause unless paused.")
                return
            self.state = SessionState.RUNNING
            await self.send(room.room_id, "Timer resumed.")
            await self.log_command(event.sender, "UNPAUSE", self.state)

        elif command in ("stop", "!stop"):
            if self.state not in (SessionState.RUNNING, SessionState.PAUSED):
                await self.send(room.room_id, "Timer is not running.")
                return
            self.state = SessionState.STOPPED
            await self.send(room.room_id, "Timer stopped.")
            await self.log_command(event.sender, "STOP", self.state)

        elif command in ("manualstart", "!manualstart") and len(args) >= 2:
            try:
                dt = datetime.strptime(args[1], "%m:%d:%H:%M")
                elapsed = datetime.now() - dt
                self.state = SessionState.RUNNING
                self.start_time = datetime.now() - elapsed
                await self.send(room.room_id, f"Manual start accepted. Elapsed time: {str(elapsed).split('.')[0]}")
                await self.log_command(event.sender, "MANUALSTART", self.state)
            except Exception as e:
                await self.send(room.room_id, f"Invalid manual start time. Use MM:DD:HH:MM (e.g., 07:31:13:52)")

        elif command in ("manualpause", "!manualpause"):
            self.state = SessionState.PAUSED
            await self.send(room.room_id, "Manual pause accepted.")
            await self.log_command(event.sender, "MANUALPAUSE", self.state)

        elif command in ("manualstop", "!manualstop"):
            self.state = SessionState.STOPPED
            await self.send(room.room_id, "Manual stop accepted.")
            await self.log_command(event.sender, "MANUALSTOP", self.state)

        elif command in ("memo", "!memo"):
            if self.state == SessionState.IDLE:
                await self.send(room.room_id, "Start a session before using memos.")
                return
            memo_text = " ".join(args[1:]) if len(args) > 1 else "[No text]"
            await self.send(room.room_id, f"Memo saved: {memo_text}")
            await self.log_command(event.sender, "MEMO", self.state)

        elif command in ("help", "!help"):
            help_text = (
                "Commands:\n"
                "!start - Start timer\n"
                "!pause - Pause timer\n"
                "!unpause - Resume timer\n"
                "!stop - Stop timer\n"
                "!manualstart MM:DD:HH:MM - Start from specific time\n"
                "!manualpause - Manually pause\n"
                "!manualstop - Manually stop\n"
                "!memo [text] - Save memo\n"
                "!help - Show this help"
            )
            await self.send(room.room_id, help_text)

    async def run(self):
        await self.client.sync_forever(timeout=30000)

# ------------------------ ENTRY ------------------------

async def main():
    # Replace with your own login method here:
    homeserver = "https://matrix.gleipnir.technology"
    user_id = "@timecarder:matrix.org"
    access_token = "syt_dGltZWNhcmRlcg_MdrLifILhYCdSuwmLjWh_183A1i"

    bot = Bot(homeserver, user_id, access_token)
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())








