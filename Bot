import os
import sys
import time
import sqlite3
import csv
from datetime import datetime

from authlib.jose import jwt
import simplematrixbotlib as botlib

PREFIX = "!"

# === Globals for time tracking ===
StartTime = 0
ElapsedTime = 0
memo_text = ""

# === Base folder for database and CSV ===
BASE_DIR = r"C:\Users\willi\Documents\MatrixBot"
DB_PATH = os.path.join(BASE_DIR, "worklogs.db")
CSV_FILE_PATH = os.path.join(BASE_DIR, "logs.csv")

# === Ensure base folder exists ===
os.makedirs(BASE_DIR, exist_ok=True)

# === Set up the SQLite database ===
conn = sqlite3.connect(DB_PATH)
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS logs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user TEXT NOT NULL,
        date TEXT NOT NULL,
        hours REAL NOT NULL,
        memo TEXT NOT NULL
    )
''')
conn.commit()

def export_to_csv():
    cursor.execute("SELECT user, date, hours, memo FROM logs ORDER BY user, date")
    rows = cursor.fetchall()

    with open(CSV_FILE_PATH, mode="w", newline="", encoding="utf-8") as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(["User", "Date", "Hours", "Memo"])
        for row in rows:
            writer.writerow(row)

def insert_log(user, hours, memo):
    date = datetime.now().strftime("%Y-%m-%d")
    cursor.execute("INSERT INTO logs (user, date, hours, memo) VALUES (?, ?, ?, ?)",
                   (user, date, hours, memo))
    conn.commit()
    export_to_csv()  # Export fresh CSV after every insert

def format_table():
    cursor.execute("SELECT DISTINCT date FROM logs ORDER BY date")
    dates = [row[0] for row in cursor.fetchall()]

    cursor.execute("SELECT DISTINCT user FROM logs ORDER BY user")
    users = [row[0] for row in cursor.fetchall()]

    table = "üóÇÔ∏è **Worklog Table**\n\n"
    header = "User        | " + " | ".join(f"{date}" for date in dates) + "\n"
    separator = "-------------" + "+".join("---------------" for _ in dates) + "\n"
    table += header + separator

    for user in users:
        row = f"{user:<12}| "
        for date in dates:
            cursor.execute("SELECT hours, memo FROM logs WHERE user = ? AND date = ?", (user, date))
            logs = cursor.fetchall()
            if logs:
                cell = ""
                for hours, memo in logs:
                    # Show only first 20 chars of memo with "..." to keep it neat
                    cell += f"{hours:.1f}h - {memo[:20]}...\n"
                row += f"{cell.strip():<15}| "
            else:
                row += f"{'':<15}| "
        table += row + "\n"
    return table

def get_token() -> str:
    token = os.environ.get("BOT_TOKEN")
    if token is None:
        try:
            with open("token.txt", "r") as f:
                token = f.read().strip()
                return token
        except OSError as e:
            print(f"Failed to read token: {e}")
        print("You must supply a BOT_TOKEN via environment variable or via token.txt")
        sys.exit(1)
    return token

def main() -> None:
    global StartTime, ElapsedTime, memo_text

    token = get_token()
    print(f"Token: {token}")
    creds = botlib.Creds(
        homeserver="https://matrix.gleipnir.technology",
        username="timecarder",
        access_token=token,
        session_stored_file="session.txt",
    )

    bot = botlib.Bot(creds)

    @bot.listener.on_message_event
    async def command_handler(room, message):
        global StartTime, ElapsedTime, memo_text

        match = botlib.MessageMatch(room, message, bot, PREFIX)
        sender = message.sender

        if not match.is_not_from_this_bot() or not match.prefix():
            return

        if match.command("START"):
            StartTime = time.time()
            ElapsedTime = 0
            await bot.api.send_text_message(room.room_id, "üü¢ Timer started. Don't mess it up.")

        elif match.command("PAUSE"):
            if StartTime == 0:
                await bot.api.send_text_message(room.room_id, "üò§ You need to START before you PAUSE.")
                return
            ElapsedTime += time.time() - StartTime
            StartTime = 0
            await bot.api.send_text_message(room.room_id, f"‚è∏Ô∏è Paused at {ElapsedTime:.2f} seconds.")

        elif match.command("UNPAUSE"):
            if StartTime != 0:
                await bot.api.send_text_message(room.room_id, "üò¨ It's already running, genius.")
                return
            StartTime = time.time()
            await bot.api.send_text_message(room.room_id, f"‚ñ∂Ô∏è Resumed. Keep going.")

        elif match.command("STOP"):
            if StartTime != 0:
                ElapsedTime += time.time() - StartTime
                StartTime = 0
            hours = ElapsedTime / 3600
            insert_log(sender, hours, memo_text.strip())
            await bot.api.send_text_message(room.room_id, f"‚èπÔ∏è Logged {hours:.2f} hours. Well done?")
            ElapsedTime = 0
            memo_text = ""

        elif match.command("MEMO"):
            new_memo = " ".join(match.args()).strip()
            if new_memo:
                timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                memo_text += f"{timestamp} {new_memo}\n"
                await bot.api.send_text_message(room.room_id, "üìù Memo added. You're a poet now.")
            else:
                await bot.api.send_text_message(room.room_id, "üòê That was... empty. Try again with actual words.")

        elif match.command("VIEW"):
            # Only allow specific users to view logs
            if any(name in sender for name in ["@williamribble:gleipnir.technology", "@eliribble:gl"]):
                table = format_table()
                if len(table) < 4000:
                    await bot.api.send_text_message(room.room_id, table)
                else:
                    parts = [table[i:i + 3900] for i in range(0, len(table), 3900)]
                    for part in parts:
                        await bot.api.send_text_message(room.room_id, part)
            else:
                await bot.api.send_text_message(room.room_id, "üö´ Nope. Not your business.")

        elif match.command("HELP"):
            await bot.api.send_text_message(
                room.room_id,
                "**üìö Timecarder Cheat Sheet**\n"
                "`!START` - Clock in.\n"
                "`!PAUSE` - Nap break.\n"
                "`!UNPAUSE` - Back to hustle.\n"
                "`!STOP` - Clock out.\n"
                "`!MEMO` - Add context to your genius.\n"
                "`!VIEW` - Boss-only overview.\n"
                "`!HELP` - Duh."
            )

        else:
            await bot.api.send_text_message(room.room_id, "‚ùå Invalid command. You need `!HELP`. Badly.")

    bot.run()

if __name__ == "__main__":
    main()
